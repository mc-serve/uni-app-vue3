# +----------------------------------------------------------------------
# | MCS [ MCS赋能企业，成就企业辉煌 ]
# +----------------------------------------------------------------------
# | Copyright (c) 2022~2024 https://www.mc-serve.com All rights reserved.
# +----------------------------------------------------------------------
# | Licensed MCS并不是自由软件，未经许可不能去掉MCS相关版权
# +----------------------------------------------------------------------
# | Author: MCS Team <cs@mc-serve.com>
# +----------------------------------------------------------------------
# | Standard: dev-gitlab-ci
# +----------------------------------------------------------------------

stages:          # List of stages for jobs, and their order of execution
  - clone
  - install
  - test
  - build
  - deploy
  - end
  - sync

拉取代码:
  stage: clone
  tags:
    - sync
  variables:
    GIT_STRATEGY: none
  script:
    - echo $CI_PROJECT_PATH
    - mkdir -p /sync
    - if [ ! -d /sync/$CI_PROJECT_PATH ]; then
        git clone ssh://git@dev.mc-serve.com:6822/$CI_PROJECT_PATH.git /sync/$CI_PROJECT_PATH;
      else
        cd /sync/$CI_PROJECT_PATH && git pull;
      fi
    - cd /sync/$CI_PROJECT_PATH
    - git branch -r | grep origin/ | grep -v 'HEAD' | sed 's|origin/||' | xargs -I{} git branch --track {} origin/{} 2>/dev/null || true

sync_to_github:
  stage: sync
  tags:
    - sync
  script:
    # 配置专用的同步密钥
    - mkdir -p ~/.ssh
    - echo "$SYNC_GITHUB_PRIVATE_KEY" > ~/.ssh/sync_github
    - chmod 600 ~/.ssh/sync_github
    
    # 使用 GIT_SSH_COMMAND 指定使用专用密钥
    - export GIT_SSH_COMMAND='ssh -i ~/.ssh/sync_github -o StrictHostKeyChecking=no'

    # 克隆 GitHub 仓库并同步所有分支
    - cd /sync/$CI_PROJECT_PATH
    - if git remote | grep -q "^github$"; then echo "Remote 'github' already exists."; else git remote add github $github_url; fi
    - git push github --all
    - git push github --tags
    - git branch -r | grep github/ | sed 's|github/||' | xargs -I{} git push github {}
